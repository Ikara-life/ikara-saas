/*
 * This file is generated by jOOQ.
 */
package studio.ikara.security.jooq.security.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import studio.ikara.security.jooq.public_.enums.SecurityUserStatusCode;
import studio.ikara.security.jooq.security.Keys;
import studio.ikara.security.jooq.security.Security;
import studio.ikara.security.jooq.security.tables.SecurityUserAuthorities.SecurityUserAuthoritiesPath;
import studio.ikara.security.jooq.security.tables.records.SecurityUsersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityUsers extends TableImpl<SecurityUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_users</code>
     */
    public static final SecurityUsers SECURITY_USERS = new SecurityUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityUsersRecord> getRecordType() {
        return SecurityUsersRecord.class;
    }

    /**
     * The column <code>security.security_users.id</code>.
     */
    public final TableField<SecurityUsersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("security.security_next_id()"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>security.security_users.user_name</code>.
     */
    public final TableField<SecurityUsersRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.CHAR(320).nullable(false).defaultValue(DSL.field(DSL.raw("'NONE'::bpchar"), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>security.security_users.email_id</code>.
     */
    public final TableField<SecurityUsersRecord, String> EMAIL_ID = createField(DSL.name("email_id"), SQLDataType.VARCHAR(320).nullable(false).defaultValue(DSL.field(DSL.raw("'NONE'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>security.security_users.dial_code</code>.
     */
    public final TableField<SecurityUsersRecord, Short> DIAL_CODE = createField(DSL.name("dial_code"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("91"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>security.security_users.phone_number</code>.
     */
    public final TableField<SecurityUsersRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.CHAR(15), this, "");

    /**
     * The column <code>security.security_users.first_name</code>.
     */
    public final TableField<SecurityUsersRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>security.security_users.last_name</code>.
     */
    public final TableField<SecurityUsersRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>security.security_users.middle_name</code>.
     */
    public final TableField<SecurityUsersRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>security.security_users.locale_code</code>.
     */
    public final TableField<SecurityUsersRecord, String> LOCALE_CODE = createField(DSL.name("locale_code"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>security.security_users.password</code>.
     */
    public final TableField<SecurityUsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>security.security_users.password_hashed</code>.
     */
    public final TableField<SecurityUsersRecord, Boolean> PASSWORD_HASHED = createField(DSL.name("password_hashed"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>security.security_users.user_status_code</code>.
     */
    public final TableField<SecurityUsersRecord, SecurityUserStatusCode> USER_STATUS_CODE = createField(DSL.name("user_status_code"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'ACTIVE'::security_user_status_code"), SQLDataType.VARCHAR)).asEnumDataType(SecurityUserStatusCode.class), this, "");

    /**
     * The column <code>security.security_users.no_failed_attempt</code>.
     */
    public final TableField<SecurityUsersRecord, Short> NO_FAILED_ATTEMPT = createField(DSL.name("no_failed_attempt"), SQLDataType.SMALLINT.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>security.security_users.created_at</code>.
     */
    public final TableField<SecurityUsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>security.security_users.updated_at</code>.
     */
    public final TableField<SecurityUsersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>security.security_users.created_by</code>.
     */
    public final TableField<SecurityUsersRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>security.security_users.updated_by</code>.
     */
    public final TableField<SecurityUsersRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "");

    private SecurityUsers(Name alias, Table<SecurityUsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityUsers(Name alias, Table<SecurityUsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_users</code> table reference
     */
    public SecurityUsers(String alias) {
        this(DSL.name(alias), SECURITY_USERS);
    }

    /**
     * Create an aliased <code>security.security_users</code> table reference
     */
    public SecurityUsers(Name alias) {
        this(alias, SECURITY_USERS);
    }

    /**
     * Create a <code>security.security_users</code> table reference
     */
    public SecurityUsers() {
        this(DSL.name("security_users"), null);
    }

    public <O extends Record> SecurityUsers(Table<O> path, ForeignKey<O, SecurityUsersRecord> childPath, InverseForeignKey<O, SecurityUsersRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityUsersPath extends SecurityUsers implements Path<SecurityUsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityUsersPath(Table<O> path, ForeignKey<O, SecurityUsersRecord> childPath, InverseForeignKey<O, SecurityUsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityUsersPath(Name alias, Table<SecurityUsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityUsersPath as(String alias) {
            return new SecurityUsersPath(DSL.name(alias), this);
        }

        @Override
        public SecurityUsersPath as(Name alias) {
            return new SecurityUsersPath(alias, this);
        }

        @Override
        public SecurityUsersPath as(Table<?> alias) {
            return new SecurityUsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public UniqueKey<SecurityUsersRecord> getPrimaryKey() {
        return Keys.SECURITY_USERS_PKEY;
    }

    @Override
    public List<UniqueKey<SecurityUsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SECURITY_USERS_EMAIL_ID_KEY, Keys.SECURITY_USERS_USER_NAME_KEY);
    }

    private transient SecurityUserAuthoritiesPath _securityUserAuthorities;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_user_authorities</code> table
     */
    public SecurityUserAuthoritiesPath securityUserAuthorities() {
        if (_securityUserAuthorities == null)
            _securityUserAuthorities = new SecurityUserAuthoritiesPath(this, null, Keys.SECURITY_USER_AUTHORITIES__FK1_USER_AUTHORITIES_USER_ID_USERS_ID.getInverseKey());

        return _securityUserAuthorities;
    }

    @Override
    public SecurityUsers as(String alias) {
        return new SecurityUsers(DSL.name(alias), this);
    }

    @Override
    public SecurityUsers as(Name alias) {
        return new SecurityUsers(alias, this);
    }

    @Override
    public SecurityUsers as(Table<?> alias) {
        return new SecurityUsers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUsers rename(String name) {
        return new SecurityUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUsers rename(Name name) {
        return new SecurityUsers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUsers rename(Table<?> name) {
        return new SecurityUsers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUsers where(Condition condition) {
        return new SecurityUsers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUsers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUsers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUsers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUsers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUsers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUsers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUsers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUsers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUsers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
