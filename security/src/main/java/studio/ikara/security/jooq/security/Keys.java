/*
 * This file is generated by jOOQ.
 */
package studio.ikara.security.jooq.security;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;

import studio.ikara.security.jooq.security.tables.SecurityAuthorities;
import studio.ikara.security.jooq.security.tables.SecurityUserAuthorities;
import studio.ikara.security.jooq.security.tables.SecurityUsers;
import studio.ikara.security.jooq.security.tables.records.SecurityAuthoritiesRecord;
import studio.ikara.security.jooq.security.tables.records.SecurityUserAuthoritiesRecord;
import studio.ikara.security.jooq.security.tables.records.SecurityUsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * security.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<SecurityAuthoritiesRecord> SECURITY_AUTHORITIES_NAME_KEY = Internal.createUniqueKey(SecurityAuthorities.SECURITY_AUTHORITIES, DSL.name("security_authorities_name_key"), new TableField[] { SecurityAuthorities.SECURITY_AUTHORITIES.NAME }, true);
    public static final UniqueKey<SecurityAuthoritiesRecord> SECURITY_AUTHORITIES_PKEY = Internal.createUniqueKey(SecurityAuthorities.SECURITY_AUTHORITIES, DSL.name("security_authorities_pkey"), new TableField[] { SecurityAuthorities.SECURITY_AUTHORITIES.ID }, true);
    public static final UniqueKey<SecurityUserAuthoritiesRecord> SECURITY_USER_AUTHORITIES_PKEY = Internal.createUniqueKey(SecurityUserAuthorities.SECURITY_USER_AUTHORITIES, DSL.name("security_user_authorities_pkey"), new TableField[] { SecurityUserAuthorities.SECURITY_USER_AUTHORITIES.ID }, true);
    public static final UniqueKey<SecurityUsersRecord> SECURITY_USERS_EMAIL_ID_KEY = Internal.createUniqueKey(SecurityUsers.SECURITY_USERS, DSL.name("security_users_email_id_key"), new TableField[] { SecurityUsers.SECURITY_USERS.EMAIL_ID }, true);
    public static final UniqueKey<SecurityUsersRecord> SECURITY_USERS_PKEY = Internal.createUniqueKey(SecurityUsers.SECURITY_USERS, DSL.name("security_users_pkey"), new TableField[] { SecurityUsers.SECURITY_USERS.ID }, true);
    public static final UniqueKey<SecurityUsersRecord> SECURITY_USERS_USER_NAME_KEY = Internal.createUniqueKey(SecurityUsers.SECURITY_USERS, DSL.name("security_users_user_name_key"), new TableField[] { SecurityUsers.SECURITY_USERS.USER_NAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<SecurityUserAuthoritiesRecord, SecurityUsersRecord> SECURITY_USER_AUTHORITIES__FK1_USER_AUTHORITIES_USER_ID_USERS_ID = Internal.createForeignKey(SecurityUserAuthorities.SECURITY_USER_AUTHORITIES, DSL.name("fk1_user_authorities_user_id_users_id"), new TableField[] { SecurityUserAuthorities.SECURITY_USER_AUTHORITIES.USER_ID }, Keys.SECURITY_USERS_PKEY, new TableField[] { SecurityUsers.SECURITY_USERS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<SecurityUserAuthoritiesRecord, SecurityAuthoritiesRecord> SECURITY_USER_AUTHORITIES__FK2_USER_AUTHORITIES_USER_ID_AUTHORITIES_ID = Internal.createForeignKey(SecurityUserAuthorities.SECURITY_USER_AUTHORITIES, DSL.name("fk2_user_authorities_user_id_authorities_id"), new TableField[] { SecurityUserAuthorities.SECURITY_USER_AUTHORITIES.AUTHORITY_ID }, Keys.SECURITY_AUTHORITIES_PKEY, new TableField[] { SecurityAuthorities.SECURITY_AUTHORITIES.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
