/*
 * This file is generated by jOOQ.
 */
package studio.ikara.security.jooq.security.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import studio.ikara.security.jooq.security.Keys;
import studio.ikara.security.jooq.security.Security;
import studio.ikara.security.jooq.security.tables.SecurityUserAuthorities.SecurityUserAuthoritiesPath;
import studio.ikara.security.jooq.security.tables.records.SecurityAuthoritiesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityAuthorities extends TableImpl<SecurityAuthoritiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_authorities</code>
     */
    public static final SecurityAuthorities SECURITY_AUTHORITIES = new SecurityAuthorities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityAuthoritiesRecord> getRecordType() {
        return SecurityAuthoritiesRecord.class;
    }

    /**
     * The column <code>security.security_authorities.id</code>.
     */
    public final TableField<SecurityAuthoritiesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("security.security_next_id()"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>security.security_authorities.name</code>.
     */
    public final TableField<SecurityAuthoritiesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>security.security_authorities.created_at</code>.
     */
    public final TableField<SecurityAuthoritiesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>security.security_authorities.created_by</code>.
     */
    public final TableField<SecurityAuthoritiesRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>security.security_authorities.updated_at</code>.
     */
    public final TableField<SecurityAuthoritiesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>security.security_authorities.updated_by</code>.
     */
    public final TableField<SecurityAuthoritiesRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "");

    private SecurityAuthorities(Name alias, Table<SecurityAuthoritiesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityAuthorities(Name alias, Table<SecurityAuthoritiesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_authorities</code> table
     * reference
     */
    public SecurityAuthorities(String alias) {
        this(DSL.name(alias), SECURITY_AUTHORITIES);
    }

    /**
     * Create an aliased <code>security.security_authorities</code> table
     * reference
     */
    public SecurityAuthorities(Name alias) {
        this(alias, SECURITY_AUTHORITIES);
    }

    /**
     * Create a <code>security.security_authorities</code> table reference
     */
    public SecurityAuthorities() {
        this(DSL.name("security_authorities"), null);
    }

    public <O extends Record> SecurityAuthorities(Table<O> path, ForeignKey<O, SecurityAuthoritiesRecord> childPath, InverseForeignKey<O, SecurityAuthoritiesRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_AUTHORITIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityAuthoritiesPath extends SecurityAuthorities implements Path<SecurityAuthoritiesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityAuthoritiesPath(Table<O> path, ForeignKey<O, SecurityAuthoritiesRecord> childPath, InverseForeignKey<O, SecurityAuthoritiesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityAuthoritiesPath(Name alias, Table<SecurityAuthoritiesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityAuthoritiesPath as(String alias) {
            return new SecurityAuthoritiesPath(DSL.name(alias), this);
        }

        @Override
        public SecurityAuthoritiesPath as(Name alias) {
            return new SecurityAuthoritiesPath(alias, this);
        }

        @Override
        public SecurityAuthoritiesPath as(Table<?> alias) {
            return new SecurityAuthoritiesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public UniqueKey<SecurityAuthoritiesRecord> getPrimaryKey() {
        return Keys.SECURITY_AUTHORITIES_PKEY;
    }

    @Override
    public List<UniqueKey<SecurityAuthoritiesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SECURITY_AUTHORITIES_NAME_KEY);
    }

    private transient SecurityUserAuthoritiesPath _securityUserAuthorities;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_user_authorities</code> table
     */
    public SecurityUserAuthoritiesPath securityUserAuthorities() {
        if (_securityUserAuthorities == null)
            _securityUserAuthorities = new SecurityUserAuthoritiesPath(this, null, Keys.SECURITY_USER_AUTHORITIES__FK2_USER_AUTHORITIES_USER_ID_AUTHORITIES_ID.getInverseKey());

        return _securityUserAuthorities;
    }

    @Override
    public SecurityAuthorities as(String alias) {
        return new SecurityAuthorities(DSL.name(alias), this);
    }

    @Override
    public SecurityAuthorities as(Name alias) {
        return new SecurityAuthorities(alias, this);
    }

    @Override
    public SecurityAuthorities as(Table<?> alias) {
        return new SecurityAuthorities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAuthorities rename(String name) {
        return new SecurityAuthorities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAuthorities rename(Name name) {
        return new SecurityAuthorities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAuthorities rename(Table<?> name) {
        return new SecurityAuthorities(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAuthorities where(Condition condition) {
        return new SecurityAuthorities(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAuthorities where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAuthorities where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAuthorities where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAuthorities where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAuthorities where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAuthorities where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAuthorities where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAuthorities whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAuthorities whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
