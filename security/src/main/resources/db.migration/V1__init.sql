DROP SCHEMA IF EXISTS SECURITY CASCADE;
CREATE SCHEMA IF NOT EXISTS SECURITY;

CREATE OR REPLACE FUNCTION SECURITY.SECURITY_GET_CUSTOM_EPOCH() RETURNS BIGINT AS
    $$
BEGIN
    RETURN 1672531200000; -- JANUARY 1, 2023 IN MILLISECONDS SINCE UNIX EPOCH
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION SECURITY.SECURITY_UPDATE_TIMESTAMP() RETURNS TRIGGER AS
    $$
BEGIN
    NEW.UPDATED_AT = CURRENT_TIMESTAMP;
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE SEQUENCE IF NOT EXISTS SECURITY.TABLE_ID_SEQ;

-- CREATE ID GENERATION FUNCTION
CREATE OR REPLACE FUNCTION SECURITY.SECURITY_NEXT_ID(OUT RESULT BIGINT) AS
    $$
    DECLARE
    OUR_EPOCH  BIGINT := SECURITY.SECURITY_GET_CUSTOM_EPOCH();
SEQ_ID     BIGINT;
NOW_MILLIS BIGINT;
SHARD_ID   INT    := 1; -- USING A FIXED SHARD ID OF 1 FOR NOW
BEGIN
SELECT NEXTVAL('SECURITY.TABLE_ID_SEQ') % 1024 INTO SEQ_ID;
SELECT FLOOR(EXTRACT(EPOCH FROM CLOCK_TIMESTAMP()) * 1000) INTO NOW_MILLIS;
RESULT := (NOW_MILLIS - OUR_EPOCH) << 23;
RESULT := RESULT | (SHARD_ID << 10);
RESULT := RESULT | (SEQ_ID);
END;
$$ LANGUAGE PLPGSQL;

CREATE TYPE SECURITY_USER_STATUS_CODE AS ENUM ('ACTIVE', 'INACTIVE', 'DELETED', 'LOCKED', 'PASSWORD_EXPIRED');

CREATE TABLE SECURITY.SECURITY_USERS
(
    ID                BIGINT                NOT NULL DEFAULT SECURITY.SECURITY_NEXT_ID(),
    USER_NAME         CHAR(320) UNIQUE      NOT NULL DEFAULT 'NONE',
    EMAIL_ID          VARCHAR(320) UNIQUE   NOT NULL DEFAULT 'NONE',
    DIAL_CODE         SMALLINT              NOT NULL DEFAULT 91,
    PHONE_NUMBER      CHAR(15),
    FIRST_NAME        VARCHAR(128),
    LAST_NAME         VARCHAR(128),
    MIDDLE_NAME       VARCHAR(128),
    LOCALE_CODE       VARCHAR(10),
    PASSWORD          VARCHAR(512)          NOT NULL,
    PASSWORD_HASHED   BOOLEAN                        DEFAULT TRUE,
    USER_STATUS_CODE  SECURITY_USER_STATUS_CODE NOT NULL DEFAULT 'ACTIVE',
    NO_FAILED_ATTEMPT SMALLINT                       DEFAULT 0,
    CREATED_AT        TIMESTAMP             NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT        TIMESTAMP             NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY        BIGINT,
    UPDATED_BY        BIGINT,
    PRIMARY KEY (ID)
);

DROP TRIGGER IF EXISTS UPDATE_SECURITY_USERS_TIMESTAMP ON SECURITY.SECURITY_USERS;

CREATE TRIGGER UPDATE_SECURITY_USERS_TIMESTAMP
    BEFORE UPDATE
    ON SECURITY.SECURITY_USERS
    FOR EACH ROW
    EXECUTE FUNCTION SECURITY.SECURITY_UPDATE_TIMESTAMP();

DROP TABLE IF EXISTS SECURITY.SECURITY_AUTHORITIES;

CREATE TABLE SECURITY.SECURITY_AUTHORITIES
(
    ID         BIGINT             NOT NULL DEFAULT SECURITY.SECURITY_NEXT_ID(),
    NAME       VARCHAR(50) UNIQUE NOT NULL,
    CREATED_AT TIMESTAMP          NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY BIGINT,
    UPDATED_AT TIMESTAMP          NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY BIGINT,
    PRIMARY KEY (ID)
);

DROP TRIGGER IF EXISTS UPDATE_SECURITY_AUTHORITIES_TIMESTAMP ON SECURITY.SECURITY_AUTHORITIES;

CREATE TRIGGER UPDATE_SECURITY_AUTHORITIES_TIMESTAMP
    BEFORE UPDATE
    ON SECURITY.SECURITY_AUTHORITIES
    FOR EACH ROW
    EXECUTE FUNCTION SECURITY.SECURITY_UPDATE_TIMESTAMP();

DROP TABLE IF EXISTS SECURITY.SECURITY_USER_AUTHORITIES;

CREATE TABLE SECURITY.SECURITY_USER_AUTHORITIES
(
    ID           BIGINT    NOT NULL DEFAULT SECURITY.SECURITY_NEXT_ID(),
    USER_ID      BIGINT    NOT NULL,
    AUTHORITY_ID BIGINT    NOT NULL,
    CREATED_AT   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY   BIGINT,
    UPDATED_AT   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY   BIGINT,
    PRIMARY KEY (ID),
    CONSTRAINT FK1_USER_AUTHORITIES_USER_ID_USERS_ID FOREIGN KEY (USER_ID) REFERENCES SECURITY.SECURITY_USERS (ID),
    CONSTRAINT FK2_USER_AUTHORITIES_USER_ID_AUTHORITIES_ID FOREIGN KEY (AUTHORITY_ID) REFERENCES SECURITY.SECURITY_AUTHORITIES (ID)
);

CREATE UNIQUE INDEX UK1_USER_AUTHORITIES_USER_ID_AUTHORITY_ID ON SECURITY.SECURITY_USER_AUTHORITIES (USER_ID, AUTHORITY_ID);

DROP TRIGGER IF EXISTS UPDATE_SECURITY_USER_AUTHORITIES_TIMESTAMP ON SECURITY.SECURITY_USER_AUTHORITIES;

CREATE TRIGGER UPDATE_SECURITY_USER_AUTHORITIES_TIMESTAMP
    BEFORE UPDATE
    ON SECURITY.SECURITY_USER_AUTHORITIES
    FOR EACH ROW
    EXECUTE FUNCTION SECURITY.SECURITY_UPDATE_TIMESTAMP();
